✅ 1. GET Request (ธรรมดา)
ใช้เพื่อขอ resource จาก server โดยไม่มี body
		GET /index.html HTTP/1.1
		Host: example.com
		User-Agent: Mozilla/5.0
		Accept: text/html
📌 ใช้สำหรับ:
โหลดหน้าเว็บ
โหลดไฟล์ CSS/JS/รูปภาพ


✅ 2. GET Request (มี Query String)
		GET /search?q=42Bangkok&page=2 HTTP/1.1
		Host: example.com
		Accept: text/html
📌 ใช้สำหรับ:
ค้นหาข้อมูล
ส่งค่าผ่าน URL


✅ 3. POST Request (Form data)
		ใช้ส่งข้อมูลฟอร์ม เช่น login
		POST /login HTTP/1.1
		Host: example.com
		Content-Type: application/x-www-form-urlencoded
		Content-Length: 29

		username=kit&password=1234
📌 ใช้สำหรับ:
ส่งฟอร์ม login/register
ส่งข้อมูลจากฟอร์มทั่วไป


✅ 4. POST Request (Upload ไฟล์ – multipart/form-data)
		POST /upload HTTP/1.1
		Host: example.com
		Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryabc123
		Content-Length: 281

		------WebKitFormBoundaryabc123
		Content-Disposition: form-data; name="file"; filename="pic.jpg"
		Content-Type: image/jpeg

		(binary data...)

		------WebKitFormBoundaryabc123--
📌 ใช้สำหรับ:
อัปโหลดไฟล์
ส่งหลาย field ไปพร้อมกัน


✅ 5. PUT Request
ใช้สำหรับ "แทนที่" resource
		PUT /data/user.json HTTP/1.1
		Host: example.com
		Content-Type: application/json
		Content-Length: 42

		{ "name": "kit", "email": "kit@42.fr" }
📌 ใช้สำหรับ:
เขียนไฟล์ใหม่ลงบน server
update ทั้ง resource (ไม่บางส่วน)


✅ 6. DELETE Request
		DELETE /uploads/old.png HTTP/1.1
		Host: example.com
📌 ใช้สำหรับ:
ลบไฟล์/ข้อมูลออกจาก server


✅ 7. HEAD Request
เหมือน GET แต่ ไม่ต้องการ body → ใช้เช็กว่าไฟล์มีอยู่ไหม
		HEAD /index.html HTTP/1.1
		Host: example.com
📌 ใช้สำหรับ:
ตรวจสอบว่าไฟล์อยู่หรือไม่ (ก่อนโหลดจริง)
เช็กขนาดไฟล์ (จาก Content-Length)


✅ 8. OPTIONS Request
ขอให้ Server บอกว่า path นั้น รองรับ method อะไรบ้าง
		OPTIONS /upload HTTP/1.1
		Host: example.com
📌 ใช้สำหรับ:
Preflight ของ CORS
REST API clients


✅ 9. GET กับ Path ที่ไม่เจอ
		GET /notfound.html HTTP/1.1
		Host: example.com
📌 Webserv ต้องตอบ 404 Not Found


✅ 10. Request ผิด Format
		GETTTT / HTTP/1.1
		Host: example.com
📌 ต้องตอบ 400 Bad Request


✅ 11. Request เกิน client_max_body_size
		POST /upload HTTP/1.1
		Host: example.com
		Content-Length: 9999999
		Content-Type: application/octet-stream

		... (body ยาวมาก)
📌 ถ้า config กำหนด limit → ต้องตอบ 413 Payload Too Large


✅ 12. GET ไปยัง path ที่ต้อง redirect	
		GET /old-path HTTP/1.1
		Host: example.com
📌 ถ้าใน config มี:
		return 301 /new-path;
Server ต้องตอบ:
		HTTP/1.1 301 Moved Permanently
		Location: /new-path


✅ 13. GET ไปยังไฟล์ CGI เช่น PHP
		GET /script.php HTTP/1.1
		Host: example.com
📌 Webserv ต้องเรียก CGI interpreter → ส่ง stdout กลับ


✅ 14. Request พร้อม Header แปลกๆ
		GET / HTTP/1.1
		Host: example.com
		X-Custom-Header: 42Bangkok
		Connection: keep-alive
📌 ต้อง parse ได้และไม่พัง


✅ 15. Chunked Transfer-Encoding
POST /upload HTTP/1.1
		Host: example.com
		Transfer-Encoding: chunked

		7\r\n
		Mozilla\r\n
		9\r\n
		Developer\r\n
		7\r\n
		Network\r\n
		0\r\n
		\r\n
📌 ใช้เมื่อไม่รู้ Content-Length → Webserv ต้อง parse chunked
(ถ้าไม่ได้ทำขั้นสูงนี้ ยังไม่จำเป็นในโปรเจกต์ก็ได้)


🎯 สรุป
Method	ใช้ทำอะไร					มี Body?	ต้องรองรับใน Webserv
GET		ขอข้อมูล					❌		  ✅
POST	ส่งข้อมูล เช่น form, upload	  ✅			✅
DELETE	ลบไฟล์					   ❌		 ✅


PUT		เขียนทับข้อมูล				  ✅			✅ (Optional)
HEAD	ตรวจสอบไฟล์				   ❌		 ✅ (เหมือน GET แต่ไม่ส่ง body)
OPTIONS	ขอlist method ที่รองรับ		 ❌			✅ (ถ้าทำ RESTful)