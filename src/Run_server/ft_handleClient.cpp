

// #include "HttpRequest.hpp"
#include "../../include/All.hpp"

// void ft_handleClient(int client_fd, char* buffer) 
void ft_handleClient(int client_fd, HttpRequest req) 
{
    // HttpRequest req;
    // ft_parseHttpRequest(buffer, req);  // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å raw HTTP request     <=== paser

    // std::cout << GREEN;
    // ft_printHttpRequest(req);
    // std::cout << GREEN << RESET;
    

    //////////////////////
	if (req.path == "/redirect") 
    {
		ft_redirect(client_fd, "/", 301); // ‚Üí stop here  fix 301 ??????
		return;
	}
    //////////////////////


    int status = ft_checkErrorHttpRequest(req, client_fd);            // <=== check error
    if (status != 200)
        return;

        
    // <=== check CGI ?????


        
    // === ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏° method ========================
    if (req.method == "GET")
        ft_handleGet(client_fd, req);
    else if (req.method == "POST")
        ft_handlePost(client_fd, req);
    else if (req.method == "DELETE")
        ft_handleDelete(client_fd, req);


    // ‡∏™‡∏£‡∏∏‡∏õ: POST / GET / DELETE ‡πÉ‡∏ä‡πâ "‡∏ï‡∏≠‡∏ô‡πÑ‡∏´‡∏ô"
    // Method	    ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠	                             ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô server
    // GET	        Client ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå, HTML	           ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á response body ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    // POST	        Client ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô form ‡∏´‡∏£‡∏∑‡∏≠ upload	    ‡∏≠‡πà‡∏≤‡∏ô req.body ‚Üí save ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    // DELETE	    Client ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏ö resource	                ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° req.path
    
    // üîß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å curl:
    // curl -X POST -d "name=chatgpt&score=99" http://localhost:8080/submit
    // curl -X GET  http://localhost:8080/
    // curl -X DELETE http://localhost:8080/file.txt




    // // ‚úÖ ‡∏ñ‡πâ‡∏≤ OK (status 200) ‚Üí ‡∏ï‡∏≠‡∏ö HTML ‡∏Å‡∏•‡∏±‡∏ö
    // std::ostringstream html;
    // // html << "<!DOCTYPE html>\n"
    // //      << "<html><body><h1>Hello from Webserv!</h1></body></html>\n";
    // html << HTML_200_TEMPLATE;
    // std::string body = html.str();
    // std::ostringstream res;
    // res << "HTTP/1.1 200 OK\r\n"
    //     << "Content-Type: text/html\r\n"
    //     << "Content-Length: " << body.size() << "\r\n"
    //     << "Connection: close\r\n"
    //     << "\r\n"
    //     << body;
    // send(client_fd, res.str().c_str(), res.str().size(), 0);//===========================
}
