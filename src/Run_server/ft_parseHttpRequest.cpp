

// #include "HttpRequest.hpp"
#include "../../include/All.hpp"


int ft_parseHttpRequest(char* buffer, HttpRequest& req, int fd) 
{
    (void)fd;
    req.rawBody.assign(buffer, buffer + strlen(buffer)); // ‡πÄ‡∏Å‡πá‡∏ö raw body
            // ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (raw data) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å buffer 
            // ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô HTTP request ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (char*) 
            // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô std::vector<char> rawBody;
            // ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á struct ‡∏´‡∏£‡∏∑‡∏≠ class HttpRequest

            ////////////////////////////////////////////////////////////// 
            // ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô:
            // üëâ buffer:
            //     ‡πÄ‡∏õ‡πá‡∏ô pointer (char*) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° raw ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å client ‡πÄ‡∏ä‡πà‡∏ô:
            //         GET /hello HTTP/1.1\r\n
            //         Host: localhost:8080\r\n
            //         User-Agent: curl/7.81.0\r\n
            //         \r\n
            // üëâ strlen(buffer):
            //     ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á string ‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° \0)
            //     ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ copy ‡∏Å‡∏µ‡πà byte
            // üëâ buffer + strlen(buffer):
            //     ‡πÄ‡∏õ‡πá‡∏ô pointer ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏Ç‡∏≠‡∏á string
            //     ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô buffer ‡∏ñ‡∏∂‡∏á buffer + strlen(buffer) ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ request
            // üëâ req.rawBody.assign(begin, end):
            //     ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á std::vector<char> ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å pointer ‡∏ä‡πà‡∏ß‡∏á begin ‡∏ñ‡∏∂‡∏á end
            //     ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö:
            //         for (const char* p = buffer; p < buffer + strlen(buffer); ++p)
            //             req.rawBody.push_back(*p);

            // ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö rawBody?
            // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö rawBody ‡πÄ‡∏õ‡πá‡∏ô vector ‡∏Ç‡∏≠‡∏á char ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ:
            //     ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠ log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HTTP ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å client ‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏ö‡∏ö‡∏î‡∏¥‡∏ö
            //     ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text ‡πÄ‡∏ä‡πà‡∏ô binary file (‡πÉ‡∏ô POST body)
            //     ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ã‡πâ‡∏≥‡πÑ‡∏õ‡∏°‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á std::string ‡∏Å‡∏±‡∏ö char*
            
            // üß† ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
            //     ‡∏ñ‡πâ‡∏≤ request body ‡∏°‡∏µ binary data (‡πÄ‡∏ä‡πà‡∏ô upload file) 
            //     ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ std::string ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ 
            //     (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ std::string ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö null-terminated string) 
            //     ‚Üí ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô std::vector<char> ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏ß‡πà‡∏≤
            
            // üîß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
            //     char buffer[] = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n";
            //     HttpRequest req;
            //     req.rawBody.assign(buffer, buffer + strlen(buffer));
                
            //     // req.rawBody now contains: {'G','E','T',' ','/',' ',...,'\r','\n','\r','\n'}
            ////////////////////////////////////////////////////////////// 

    std::string         request(buffer);
    std::istringstream  stream(request);
    std::string         line;
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á stream ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏≤‡∏Å request

    // 1. Parse request line
    if (std::getline(stream, line)) 
    {
        std::istringstream      reqLine(line);
        // reqLine >> req.method >> req.path >> req.version ;
        reqLine >> req.method >> req.path >> req.version >> req.afterVersion;

        // if (!req.afterVersion.empty())
        // {
        //     std::cout << std::left << std::setw(18) << "Debug afterVersion has text:"         << req.afterVersion        << " <===error\n";
        //     ft_400BadRequest(fd);
        //     return(-1);
        // }
        // std::cout << std::left << std::setw(18) << "Check finish loop (if error AfterVersion have text )";



            // example
            //     GET /hello?name=kit HTTP/1.1
            //     ‚Üí ‡∏à‡∏∞‡πÑ‡∏î‡πâ:
            //     req.method  = "GET";
            //     req.path    = "/hello?name=kit";
            //     req.version = "HTTP/1.1";


        // ‡πÅ‡∏¢‡∏Å query ‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ?)
        size_t      qPos = req.path.find('?');
        if (qPos != std::string::npos) {
            req.query = req.path.substr(qPos + 1);
            req.path = req.path.substr(0, qPos);
        }
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ? ‡πÉ‡∏ô path (query string) ‚Üí ‡πÅ‡∏¢‡∏Å query ‡∏Å‡∏±‡∏ö path ‡∏≠‡∏≠‡∏Å
            // ‡πÄ‡∏ä‡πà‡∏ô /hello?name=kit ‚Üí
            //     req.path = "/hello"
            //     req.query = "name=kit"

    }

    // 2. Parse headers
    while (std::getline(stream, line) && line != "\r") {
        size_t      pos = line.find(':');
        if (pos != std::string::npos) {
            std::string     key = line.substr(0, pos);
            std::string     value = line.substr(pos + 1);

            // ft_trim spaces
            key.erase(key.find_last_not_of(" \r\n") + 1);
            value.erase(0, value.find_first_not_of(" "));
            value.erase(value.find_last_not_of(" \r\n") + 1);

            req.headers[key] = value;
                    // ‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô headers ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏ô‡πÄ‡∏à‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á (\r)
                    // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠ header ‡πÄ‡∏ä‡πà‡∏ô Content-Type: text/html
                    // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏™‡πà map req.headers["Content-Type"] = "text/html"


            // ‡∏ï‡∏£‡∏ß‡∏à header ‡∏û‡∏¥‡πÄ‡∏®‡∏©:
            // ‡∏î‡∏∂‡∏á header ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏™‡πà‡πÉ‡∏ô field ‡∏Ç‡∏≠‡∏á HttpRequest ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            if (key == "Content-Length")
                req.contentLength = std::atoi(value.c_str());
            else if (key == "Content-Type")
                req.contenttype = value;
            else if (key == "Cookie")
                req.cookie = value;
        }
    }

    // 3. Parse body (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    // (‡∏Å‡∏£‡∏ì‡∏µ POST ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)
    std::string     body;
    while (std::getline(stream, line)) {
        body += line + "\n";
    }

    if (!body.empty()) {
        req.body = body;
    }
        // ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á header ‚Üí ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô body
        // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô req.body



    // 4. ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏à‡∏≤‡∏Å path)
    size_t  lastSlash = req.path.find_last_of('/');
    if (lastSlash != std::string::npos && lastSlash + 1 < req.path.length()) {
        req.filename = req.path.substr(lastSlash + 1);
    } else {
        req.filename = "index.html"; // default
    }
        // ‡πÄ‡∏ä‡πà‡∏ô /images/logo.png ‚Üí filename = "logo.png"
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡πÉ‡∏ä‡πâ "index.html" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

 
    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ complete ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ request ‡∏ô‡∏µ‡πâ parse ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
    req.complete = true;


    std::cout << GREEN;
    ft_printHttpRequest(req);
    std::cout << GREEN << RESET;

    return(0);
}
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ parse
    // ‡∏à‡∏≤‡∏Å input:
/*
POST /upload/photo.jpg?token=abc123 HTTP/1.1
Host: localhost:8080
Content-Type: image/jpeg
Content-Length: 1024
Cookie: session=xyz

<binary body here>
*/

    // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏ô req:
    //     req.method        = "POST"
    //     req.path          = "/upload/photo.jpg"
    //     req.query         = "token=abc123"
    //     req.version       = "HTTP/1.1"
    //     req.headers[...]  = { ... }
    //     req.contenttype   = "image/jpeg"
    //     req.contentLength = 1024
    //     req.cookie        = "session=xyz"
    //     req.filename      = "photo.jpg"
    //     req.body          = "<binary body>"
    //     req.complete      = true



void ft_printHttpRequest(const HttpRequest& req) {
    std::cout << "===== HttpRequest Detail =====\n";

    std::cout << std::left << std::setw(18) << "method:"         << req.method        << "\n";
    std::cout << std::left << std::setw(18) << "path:"           << req.path          << "\n";
    std::cout << std::left << std::setw(18) << "query:"          << req.query         << "\n";
    std::cout << std::left << std::setw(18) << "version:"        << req.version       << "\n";
    std::cout << std::left << std::setw(18) << "filename:"       << req.filename      << "\n";
    std::cout << std::left << std::setw(18) << "contentType:"    << req.contenttype   << "\n";
    std::cout << std::left << std::setw(18) << "cookie:"         << req.cookie        << "\n";
    std::cout << std::left << std::setw(18) << "contentLength:"  << req.contentLength << "\n";
    std::cout << std::left << std::setw(18) << "complete:"       << (req.complete ? "true" : "false") << "\n";

    std::cout << std::left << std::setw(18) << "headers:"        << "\n";
    for (std::map<std::string, std::string>::const_iterator it = req.headers.begin(); 
        it != req.headers.end(); 
        ++it) {
        std::cout << "  - " << it->first << ": " << it->second   << "\n";
    }

    std::cout << std::left << std::setw(18) << "body:" << "\n"   << req.body << "\n";

    std::cout << std::left << std::setw(18) << "rawBody size:"   << req.rawBody.size() << " bytes\n";
    std::cout << "===============================\n";
}



